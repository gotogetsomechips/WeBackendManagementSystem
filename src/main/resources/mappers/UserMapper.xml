<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store.mapper.UserMapper">

    <resultMap id="userResultMap" type="store.bean.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="gender" column="gender"/>
        <result property="address" column="address"/>
        <result property="userLevel" column="user_level"/>
        <result property="status" column="status"/>
        <result property="loginAttempts" column="login_attempts"/>
        <result property="createTime" column="create_time"/>
        <result property="lastLoginTime" column="last_login_time"/>
    </resultMap>

    <select id="findByUsername" parameterType="string" resultMap="userResultMap">
        SELECT * FROM t_user WHERE username = #{username}
    </select>

    <select id="findByEmail" parameterType="string" resultMap="userResultMap">
        SELECT * FROM t_user WHERE email = #{email}
    </select>

    <select id="findById" parameterType="int" resultMap="userResultMap">
        SELECT * FROM t_user WHERE id = #{id}
    </select>

    <select id="getAllUsers" resultMap="userResultMap">
        SELECT * FROM t_user ORDER BY create_time DESC
    </select>

    <select id="getUsersByPage" resultMap="userResultMap">
        SELECT * FROM t_user
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="userLevel != null and userLevel != ''">
                AND user_level = #{userLevel}
            </if>
            <if test="startTime != null">
                AND create_time >= #{startTime}
            </if>
            <if test="endTime != null">
                AND create_time &lt;= #{endTime}
            </if>
        </where>
        ORDER BY
        <choose>
            <when test="sortField == 'username'">
                username ${sortOrder}
            </when>
            <otherwise>
                create_time DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>
    <select id="countUsers" resultType="int">
        SELECT COUNT(*) FROM t_user
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="userLevel != null and userLevel != ''">
                AND user_level = #{userLevel}
            </if>
            <if test="startTime != null">
                AND create_time >= #{startTime}
            </if>
            <if test="endTime != null">
                AND create_time &lt;= #{endTime}
            </if>
        </where>
    </select>

    <select id="checkUsernameExists" resultType="boolean">
        SELECT COUNT(*) > 0 FROM t_user
        WHERE username = #{username}
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <insert id="addUser" parameterType="store.bean.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_user (username, password, email, phone, gender, address, user_level, status, login_attempts, create_time, last_login_time)
        VALUES (#{username}, #{password}, #{email}, #{phone}, #{gender}, #{address}, #{userLevel}, #{status}, #{loginAttempts}, #{createTime}, #{lastLoginTime})
    </insert>

    <update id="updateUser" parameterType="store.bean.User">
        UPDATE t_user
        SET username = #{username},
            email = #{email},
            phone = #{phone},
            gender = #{gender},
            address = #{address},
            user_level = #{userLevel},
            status = #{status}
        WHERE id = #{id}
    </update>

    <delete id="deleteUser" parameterType="int">
        DELETE FROM t_user WHERE id = #{id}
    </delete>

    <delete id="batchDeleteUsers">
        DELETE FROM t_user WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <update id="updateLoginAttempts">
        UPDATE t_user
        SET login_attempts = #{loginAttempts}
        WHERE id = #{id}
    </update>

    <update id="updateUserStatus">
        UPDATE t_user
        SET status = #{status}
        WHERE id = #{id}
    </update>

    <update id="updateLastLoginTime">
        UPDATE t_user
        SET last_login_time = #{lastLoginTime}
        WHERE id = #{id}
    </update>
</mapper>